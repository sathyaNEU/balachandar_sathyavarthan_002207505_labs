/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package ui.CustomerRole;

import model.Product;
import model.Supplier;
import model.SupplierDirectory;
import ui.CustomerRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.MasterOrderList;
import model.Order;
import model.OrderItem;


/**
 *
 * @author Rushabh
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {

    /** Creates new form BrowseProducts */
    
    JPanel userProcessContainer; 
    SupplierDirectory supplierDirectory;
    MasterOrderList masterOrderList;
    Order currentOrder;
    
    public BrowseProductsJPanel(JPanel userProcessContainer, SupplierDirectory supplierDirectory, MasterOrderList masterOrderList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.supplierDirectory = supplierDirectory;
        this.masterOrderList = masterOrderList;
        this.currentOrder = new Order();
        populateSupplierComboBox();
        refreshTable();
        refreshCart();
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblSupplier = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        lblProductCatalogue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        lblSalesPrice = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        btnProductDetails = new javax.swing.JButton();
        lblItemsInCart = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        btnViewOrderItem = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();

        setBackground(new java.awt.Color(240, 240, 240));
        setPreferredSize(new java.awt.Dimension(650, 600));

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(204, 0, 0));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/logoPleaseBuySmall.png"))); // NOI18N
        lblTitle.setText("Have a wonderful shopping experience!");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblTitle.setIconTextGap(20);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSupplier.setText("Supplier:");

        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        lblProductCatalogue.setText("Product Catalog:");

        tblProductCatalog.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Id", "Name", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        lblSalesPrice.setText("Sales Price:");

        lblQuantity.setText("Quantity:");

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        btnProductDetails.setText("View Product Details");
        btnProductDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductDetailsActionPerformed(evt);
            }
        });

        lblItemsInCart.setText("Items in cart:");

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product No", "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblProductCatalogue)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSearchProduct))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSalesPrice)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                        .addComponent(lblItemsInCart)
                        .addComponent(jScrollPane2)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnModifyQuantity)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewOrderItem)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnRemoveOrderItem)))
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(lblTitle)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {spnQuantity, txtSalesPrice});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProductCatalogue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProductDetails)
                    .addComponent(lblSalesPrice)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart))
                .addGap(18, 18, 18)
                .addComponent(lblItemsInCart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewOrderItem)
                    .addComponent(btnRemoveOrderItem)
                    .addComponent(btnModifyQuantity)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

    }// </editor-fold>//GEN-END:initComponents

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        refreshTable();
             
    }//GEN-LAST:event_cmbSupplierActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProductDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductDetailsActionPerformed
        // TODO add your handling code here:
        int index  = tblProductCatalog.getSelectedRow();
        if(index==-1)
            JOptionPane.showMessageDialog(this, "Row not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
        else{
            Product product = (Product)tblProductCatalog.getValueAt(index, 0);
            ViewProductDetailJPanel viewProductDetailJPanel = new ViewProductDetailJPanel(userProcessContainer, product );
            this.userProcessContainer.add("viewProductDetailJPanel",viewProductDetailJPanel);
            ((CardLayout)this.userProcessContainer.getLayout()).next(this.userProcessContainer);
        }
        
    }//GEN-LAST:event_btnProductDetailsActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if(this.currentOrder.getOrderItemList().isEmpty())
            JOptionPane.showMessageDialog(this, "Cart Empty", "WARNING", JOptionPane.WARNING_MESSAGE);
        else{
            this.masterOrderList.getOrderList().add(currentOrder);
            JOptionPane.showMessageDialog(this, "Thank you for your purchase");
            this.currentOrder = new Order();
            txtSearch.setText("");
            txtSalesPrice.setText("");
            spnQuantity.setValue(0);
            txtNewQuantity.setText("");
            refreshCart();
            refreshTable();
        }
       
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int index = tblCart.getSelectedRow();
        int quantity;
        if(index==-1)
            JOptionPane.showMessageDialog(this, "Row not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
        else{
            DefaultTableModel dtm = (DefaultTableModel)tblCart.getModel();
            OrderItem orderItem = (OrderItem)dtm.getValueAt(index, 0);
            int old_quant = orderItem.getQuantity();
            try{
                quantity = Integer.parseInt(txtNewQuantity.getText());
                if(quantity<0)
                    throw new Exception();
                else if(quantity==0)
                    JOptionPane.showMessageDialog(this,"Remove the product", "WARNING", JOptionPane.WARNING_MESSAGE);
                else {
                    orderItem.getProduct().setAvail(orderItem.getProduct().getAvail() - quantity + old_quant);
                    orderItem.setQuantity(quantity);
                    refreshTable();
                    refreshCart();
                    JOptionPane.showMessageDialog(this, "Order updated successfully");

                }
            }
            catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Inappropriate Quantity field","ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
        }
        
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String keyWord = txtSearch.getText();
        refreshTable(keyWord);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
       int index  = tblCart.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel)tblCart.getModel();
        if(index==-1)
            JOptionPane.showMessageDialog(this, "Row not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
        else{
            OrderItem orderItem = (OrderItem)dtm.getValueAt(index, 0);
            int old_quant = orderItem.getQuantity();
            orderItem.getProduct().setAvail(old_quant+orderItem.getProduct().getAvail());
            this.currentOrder.getOrderItemList().remove(orderItem);
            refreshCart();
            refreshTable();
        }
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        int index  = tblCart.getSelectedRow();
        DefaultTableModel dtm = (DefaultTableModel)tblCart.getModel();
        if(index==-1)
            JOptionPane.showMessageDialog(this, "Row not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
        else{
        OrderItem orderItem = (OrderItem)dtm.getValueAt(index, 0);
        ViewOrderItemDetailJPanel viewOrderItemDetailJPanel = new ViewOrderItemDetailJPanel(userProcessContainer, orderItem);
        this.userProcessContainer.add("viewOrderItemDetailJPanel",viewOrderItemDetailJPanel);
        ((CardLayout)this.userProcessContainer.getLayout()).next(userProcessContainer);
        }
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
                
        int index  = tblProductCatalog.getSelectedRow();
        if(index==-1){
            JOptionPane.showMessageDialog(this, "Row not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Product product = (Product)tblProductCatalog.getValueAt(index, 0);
        
        double salesPrice =0;
        int quantity = 0;
        try{
            salesPrice = Double.parseDouble(txtSalesPrice.getText()); 
            quantity = (Integer)spnQuantity.getValue();
            if(quantity==0)
                throw new Exception();
        }
        catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid Quantity or Price Field", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(salesPrice< product.getPrice()){
           JOptionPane.showMessageDialog(this, "Sales price cant be less than the product price", "ERROR", JOptionPane.ERROR_MESSAGE);
           return;
        }
        
        OrderItem item = this.currentOrder.findProductFromOrderItem(product);
        if(item==null){
            if(product.getAvail()>=quantity){
            currentOrder.addOrderItem(product, salesPrice, quantity);
                System.out.println(quantity);
            item = this.currentOrder.findProductFromOrderItem(product);
            product.setAvail(product.getAvail()-quantity);
            DefaultTableModel dtm = (DefaultTableModel)tblCart.getModel();
            Object[] obj= new Object[4];
            obj[0] = item.getProduct().getProdName();
            obj[1] = String.valueOf(item.getSalesPrice());
            obj[2] = String.valueOf(item.getQuantity());
            obj[3] = String.valueOf(item.getQuantity()*item.getSalesPrice());
            dtm.addRow(obj);
            refreshTable();
            refreshCart();
            }
            else{
                JOptionPane.showMessageDialog(this, "Insufficient Quantity", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        else{
           int oldQuant = item.getQuantity();
           if(oldQuant + product.getAvail() < quantity){
                JOptionPane.showMessageDialog(this, "Insufficient Quantity", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;    
           }
           item.getProduct().setAvail(item.getProduct().getAvail()+oldQuant-quantity);
           item.setQuantity(quantity);  
           item.setSalesPrice(salesPrice);
           refreshCart();
           refreshTable();
        }
    
    }//GEN-LAST:event_btnAddToCartActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnProductDetails;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblItemsInCart;
    private javax.swing.JLabel lblProductCatalogue;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSalesPrice;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void populateSupplierComboBox() {
        this.cmbSupplier.removeAllItems();
        for(Supplier supplier : this.supplierDirectory.getSupplierlist()){
            this.cmbSupplier.addItem(supplier);
        }
    }

    private void refreshTable(String keyWord) {
            DefaultTableModel dtm = (DefaultTableModel)tblProductCatalog.getModel();
            dtm.setRowCount(0);
            for(Supplier supplier: this.supplierDirectory.getSupplierlist())
            for(Product product : supplier.getProductCatalog().getProductcatalog()){
                if(product.getProdName().equalsIgnoreCase(keyWord)){
                  Object[] obj = new Object[4];
                  obj[0] = product;
                  obj[1] = product.getProdName();
                  obj[2] = product.getPrice();
                  obj[3] = product.getAvail();
                  dtm.addRow(obj);
                }
          }
           
    }
    
    private void refreshTable(){
         DefaultTableModel dtm = (DefaultTableModel)tblProductCatalog.getModel();
         dtm.setRowCount(0);
         Supplier selectedSupplier = (Supplier)cmbSupplier.getSelectedItem();
         if(selectedSupplier!=null)
            for(Product product : selectedSupplier.getProductCatalog().getProductcatalog()){
                  Object[] obj = new Object[4];
                  obj[0] = product;
                  obj[1] = product.getProdName();
                  obj[2] = product.getPrice();
                  obj[3] = product.getAvail();
                  dtm.addRow(obj);          
          }
    }

    private void refreshCart() {
       DefaultTableModel dtm = (DefaultTableModel)tblCart.getModel();
       dtm.setRowCount(0);
       for(OrderItem orderItem : this.currentOrder.getOrderItemList()){
            Object[] obj = new Object[5];
            obj[0] = orderItem;
            obj[1] = orderItem.getProduct().getProdName();
            obj[2] = orderItem.getSalesPrice();
            obj[3] = orderItem.getQuantity();
            obj[4] = String.valueOf(orderItem.getQuantity()*orderItem.getSalesPrice());
            dtm.addRow(obj);    
       }
}
}
